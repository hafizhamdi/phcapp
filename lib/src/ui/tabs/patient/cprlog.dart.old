import 'dart:collection';

import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:phcapp/custom/choice_chip.dart';
import 'package:phcapp/custom/header_section.dart';
import 'package:intl/intl.dart';
import 'package:phcapp/custom/label.dart';
import 'package:phcapp/src/models/phc.dart';
import 'package:phcapp/src/providers/cpr_provider.dart';
import 'package:provider/provider.dart';

const _rhythmChoices = ['Rhythm 1', 'Rhythm 2', 'Rhythm 3'];
const _mainChoices = [
  'Witness CPR',
  'Bystander CPR',
  'CPR Start',
  'ROSC',
  'CPR Stop'
];

const _typeChoices = ['Shockable', "Non-shockable", "Other"];

const _rhythmType = [
  "VF",
  "Pulseless VT",
  "Asystole",
  "PEA",
  "Tachyarrythmias",
  "Bradyarrythmias"
];

const _drugsType = ["Adrenaline", "Amiodarone", "Atropine"];

const _interventionType = ["Defibrillation", "Sync-cardioversion", "Pacing"];

const _airwayType = ["BVM", "LMA", "ETT"];

// const _rhythmChoice = ['Rhythm 1', 'Rhythm 2', 'Rhythm 3'];

final GlobalKey<AnimatedListState> _listKey = GlobalKey();
final _formKey = GlobalKey<FormState>();

List<String> _data = ['CPR Start', 'Bystander', 'ROSC'];

class CPRLog extends StatefulWidget {
  final CprLog cprLog;
  CPRLog({this.cprLog});

  _CPRLog createState() => _CPRLog();
}

class _CPRLog extends State<CPRLog> {
  @override
  void didChangeDependencies() {
    print("DIDCHANGEDEPENDENCIES");
    // final cprProvider = Provider.of<CPRProvider>(context);
    // cprProvider.items.add(widget.cprLog);
    // print(widget.cprLog.length);
    // if (widget.cprLog != null) {
    //   widget.cprLog.logs.map((f) {
    //     print(f.toJson());
    //     cprProvider.items.add(f);
    //   });
    // }
    super.didChangeDependencies();
  }

  @override
  build(BuildContext context) {
    print("BUILD CPRLOG");
    final cprProvider = Provider.of<CPRProvider>(context);

    if (widget.cprLog != null) cprProvider.setLogs = widget.cprLog.logs;

    return Scaffold(
      // backgroundColor: Colors.grey[200],
      body: Consumer<CPRProvider>(
        builder: (context, logs, child) {
          return SingleChildScrollView(
              physics: BouncingScrollPhysics(),
              child: Card(
                  margin:
                      EdgeInsets.only(left: 10, right: 10, top: 10, bottom: 70),
                  child: Column(
                    // child: Scaffold(
                    //   // backgroundColor: Colors.grey[200],
                    //   body: Consumer<LogModel>(
                    //     builder: (context, logs, child) {
                    //       return ListView(
                    children: <Widget>[
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: <Widget>[
                          _buildIconData(context, logs, Icons.videocam,
                              _typeChoices, "Types"),
                          _buildIconData(context, logs, Icons.vibration,
                              _rhythmType, "Rhythm"),
                          _buildIconData(context, logs, Icons.donut_large,
                              _drugsType, "Drugs"),
                          _buildIconData(context, logs, Icons.surround_sound,
                              _interventionType, "Intervention"),
                        ],
                      ),
                      // HeaderSection("Select rhythm"),
                      // SingleOption(_rhythmChoice),
                      HeaderSection("CPR Logs"),
                      _todaysDate(),

                      SizedBox(
                          height: 500,
                          child: AnimatedList(
                            shrinkWrap: true,
                            physics: NeverScrollableScrollPhysics(),

                            // Give the Animated list the global key
                            key: _listKey,
                            initialItemCount: logs.items.length,
                            // _data.length,
                            // Similar to ListView itemBuilder, but AnimatedList has
                            // an additional animation parameter.
                            itemBuilder: (context, index, animation) {
                              // Breaking the row widget out as a method so that we can
                              // share it with the _removeSingleItem() method.
                              return _buildItem(
                                  logs, index, logs.items[index], animation);
                            },
                          )),
                      // ),
                    ],
                  )));
        },
      ),
      // floatingActionButton: FloatingActionButton.extended(
      //   onPressed: () {},
      //   label: Text('SELECT ACTION'),
      //   icon: Icon(Icons.menu),
      //   backgroundColor: Colors.purple,
      // )
      // )
    );
    // return
  }

  void onModalPressed(context) {}

  Widget _buildItem(logs, index, LogMeasurement data, Animation animation) {
    return SizeTransition(
      sizeFactor: animation,
      child: Card(
        child: ListTile(
            title: Text(
              data.item,
              style: TextStyle(fontSize: 20),
            ),
            subtitle: Text(data.measurement != null ? data.measurement : ""),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                Text(data.timestamp),
                IconButton(
                  icon: Icon(Icons.delete),
                  onPressed: () {
                    // int temp = index;
                    // temp -= 1;
                    // print(temp);
                    // print(index--);
                    logs.remove(index);

                    AnimatedListRemovedItemBuilder builder =
                        (context, animation) {
                      return _buildItem(logs, index, data, animation);
                    };
                    // Remove the item visually from the AnimatedList.
                    _listKey.currentState.removeItem(index, builder);

                    // This builder is just for showing the row while it is still
                    // animating away. The item is already gone from the data list.

                    // _listKey.currentStat
                    // _listKey.currentState.
                    // _listKey.currentState.removeItem(2);
                  },
                )
              ],
            )),
      ),
    );
  }

  void _insertSingleItem(String newItem) {
    // var df = new DateFormat.jm();

    // String newItem = "Planet";
    // Arbitrary location for demonstration purposes
    int insertIndex = 2;
    // Add the item to the data list.
    _data.insert(insertIndex, newItem);
    // Add the item visually to the AnimatedList.
    _listKey.currentState.insertItem(insertIndex);
  }
}

Widget _todaysDate() {
  String currentDate =
      new DateFormat.yMMMMd("en_US").format(new DateTime.now());
  return Container(
    padding: EdgeInsets.only(left: 10),
    child: Text(
      currentDate,
    ),
  );
}

Widget _buildIconData(BuildContext context, logs, IconData icon,
    List<String> list, String title) {
  String data;
  String text;
  final commentController = TextEditingController();

  void setItem(String item) {
    data = item;
  }

  void chipCallback(String item, List<String> list) {
    // void chipCallback(String item) {
    print('mylist:$list');
    print('user tapped on $item');

    setItem(list[0]);
  }

  @override
  void dispose() {
    commentController.dispose();
  }

  String getItem() {
    return data;
  }

  return Column(
    children: <Widget>[
      IconButton(
        icon: Icon(icon),
        onPressed: () {
          showDialog(
              context: context,
              builder: (BuildContext context) {
                return AlertDialog(
                    content: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: <Widget>[
                      Padding(
                          padding: EdgeInsets.all(10),
                          child: Text('Select $title:')),
                      // Label("Select type", ""),
                      SingleOption(
                          header: title,
                          stateList: list,
                          callback: chipCallback),
                      // SingleOption(list, chipCallback),
                      Padding(
                        padding: EdgeInsets.all(8.0),
                        child: TextField(
                          decoration: InputDecoration(
                              // border: InputBorder.none,
                              hintText: "Put detail measurements"),
                          controller: commentController,
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: RaisedButton(
                          color: Colors.lightGreen,
                          child: Text(
                            "GENERATE LOG",
                          ),
                          onPressed: () {
                            String newItem = getItem();
                            // Arbitrary location for demonstration purposes
                            int insertIndex = 0;
                            // int lastItems = logs._item.length;
                            // Add the item to the data list.
                            LogMeasurement logItem = new LogMeasurement(
                                item: title + " " + newItem,
                                measurement: commentController.text,
                                timestamp: new DateFormat.jm()
                                    .format(new DateTime.now()));
                            logs.add(logItem);
                            // logs.add(title +
                            //     " " +
                            //     newItem +
                            //     " " +
                            //     commentController.text);
                            // logs._items.insert(0, newItem);
                            // _data.insert(insertIndex, newItem);
                            // Add the item visually to the AnimatedList.
                            _listKey.currentState.insertItem(insertIndex);
                            // if (_formKey.currentState.validate()) {
                            //   _formKey.currentState.save();
                            // }
                            Navigator.pop(context);
                          },
                        ),
                      )
                    ],
                  ),
                ));
              });
        },
      ),
      Text(
        title,
        style: TextStyle(fontSize: 12, color: Colors.grey),
      ),
    ],
  );

  void _insertSingleItem() {
    // var df = new DateFormat.jm();
  }
}
